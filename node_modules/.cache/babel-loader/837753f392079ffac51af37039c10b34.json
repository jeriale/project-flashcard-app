{"ast":null,"code":"var _jsxFileName = \"/home/jon/qualified-challenges/Project_Flashcards_Qualified_1/src/Components/EditDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { readDeck, updateDeck } from \"../utils/api\";\nimport EditForm from \"./EditForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditDeck({\n  data\n}) {\n  _s();\n\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  const [deck, setDeck] = useState(null);\n  console.log(data);\n  useEffect(() => {\n    async function getDeck() {\n      try {\n        const response = await readDeck(deckId);\n        setDeck(response);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    getDeck();\n  }, [deckId]);\n\n  const handleDeckUpdate = formData => {\n    const update = {\n      name: formData.name,\n      description: formData.description,\n      id: deckId\n    };\n    updateDeck(update);\n    history.push(`/decks/${deckId}`);\n    window.location.reload(true);\n  };\n\n  if (deck === null) {\n    return /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(EditForm, {\n    type: \"Deck\",\n    data: deck,\n    event: handleDeckUpdate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n}\n\n_s(EditDeck, \"2fhLIB02Z3yQiTceCh8X1K7lk9c=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = EditDeck;\nexport default EditDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditDeck\");","map":{"version":3,"sources":["/home/jon/qualified-challenges/Project_Flashcards_Qualified_1/src/Components/EditDeck.js"],"names":["React","useState","useEffect","useParams","useHistory","readDeck","updateDeck","EditForm","EditDeck","data","deckId","history","deck","setDeck","console","log","getDeck","response","error","handleDeckUpdate","formData","update","name","description","id","push","window","location","reload"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAGA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA4B;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAaP,SAAS,EAA5B;AACA,QAAMQ,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;AAEAa,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAec,OAAf,GAAyB;AACvB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMZ,QAAQ,CAACK,MAAD,CAA/B;AACAG,QAAAA,OAAO,CAACI,QAAD,CAAP;AACD,OAHD,CAGE,OAAOC,KAAP,EAAc;AACdJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF;;AACDF,IAAAA,OAAO;AACR,GAVQ,EAUN,CAACN,MAAD,CAVM,CAAT;;AAYA,QAAMS,gBAAgB,GAAIC,QAAD,IAAc;AACrC,UAAMC,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAEF,QAAQ,CAACE,IADJ;AAEXC,MAAAA,WAAW,EAAEH,QAAQ,CAACG,WAFX;AAGXC,MAAAA,EAAE,EAAEd;AAHO,KAAf;AAKAJ,IAAAA,UAAU,CAACe,MAAD,CAAV;AACAV,IAAAA,OAAO,CAACc,IAAR,CAAc,UAASf,MAAO,EAA9B;AACAgB,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACD,GATD;;AAWA,MAAIhB,IAAI,KAAK,IAAb,EAAmB;AACjB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAEH,sBAAO,QAAC,QAAD;AAAU,IAAA,IAAI,EAAC,MAAf;AAAsB,IAAA,IAAI,EAAEA,IAA5B;AAAkC,IAAA,KAAK,EAAEO;AAAzC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAnCQX,Q;UACcL,S,EACHC,U;;;KAFXI,Q;AAqCT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { readDeck, updateDeck } from \"../utils/api\";\nimport EditForm from \"./EditForm\";\n\n\nfunction EditDeck({ data }) {\n    const { deckId } = useParams();\n    const history = useHistory();\n    const [deck, setDeck] = useState(null);\n\n    console.log(data);\n\n    useEffect(() => {\n      async function getDeck() {\n        try {\n          const response = await readDeck(deckId);\n          setDeck(response);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      getDeck();\n    }, [deckId]);\n\n    const handleDeckUpdate = (formData) => {\n      const update = {\n          name: formData.name,\n          description: formData.description,\n          id: deckId\n      }\n      updateDeck(update);\n      history.push(`/decks/${deckId}`);\n      window.location.reload(true);\n    }\n\n    if (deck === null) {\n      return <strong>Loading...</strong>;\n    }\n\n  return <EditForm type=\"Deck\" data={deck} event={handleDeckUpdate} />;\n}\n\nexport default EditDeck;"]},"metadata":{},"sourceType":"module"}