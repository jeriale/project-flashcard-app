{"ast":null,"code":"var _jsxFileName = \"/home/jon/qualified-challenges/Project_Flashcards_Qualified_1/src/Components/EditCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { updateCard, readCard } from \"../utils/api\";\nimport EditForm from \"./EditForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditCard() {\n  _s();\n\n  const history = useHistory();\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const [card, setCard] = useState(null);\n  useEffect(() => {\n    async function getCard() {\n      try {\n        const response = await readCard(cardId);\n        setCard(response);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    getCard();\n  }, [cardId]);\n\n  const handleCardUpdate = formData => {\n    const updated = {\n      front: formData.front,\n      back: formData.back,\n      id: cardId,\n      deckId: parseInt(deckId)\n    };\n    updateCard(updated);\n    history.push(`/decks/${deckId}`);\n    window.location.reload(true);\n  };\n\n  if (card === null) {\n    return /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(EditForm, {\n    data: card,\n    event: handleCardUpdate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 12\n  }, this);\n}\n\n_s(EditCard, \"T29F4tYwp+qV+8cfjiGWMcSP+jQ=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = EditCard;\nexport default EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["/home/jon/qualified-challenges/Project_Flashcards_Qualified_1/src/Components/EditCard.js"],"names":["React","useEffect","useState","useHistory","useParams","updateCard","readCard","EditForm","EditCard","history","deckId","cardId","card","setCard","getCard","response","error","console","log","handleCardUpdate","formData","updated","front","back","id","parseInt","push","window","location","reload"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,cAArC;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAM;AAAEO,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBP,SAAS,EAApC;AAEA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,OAAf,GAAyB;AACrB,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMT,QAAQ,CAACK,MAAD,CAA/B;AACAE,QAAAA,OAAO,CAACE,QAAD,CAAP;AACH,OAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;;AACDF,IAAAA,OAAO;AACV,GAVQ,EAUN,CAACH,MAAD,CAVM,CAAT;;AAYA,QAAMQ,gBAAgB,GAAIC,QAAD,IAAc;AACnC,UAAMC,OAAO,GAAG;AACZC,MAAAA,KAAK,EAAEF,QAAQ,CAACE,KADJ;AAEZC,MAAAA,IAAI,EAAEH,QAAQ,CAACG,IAFH;AAGZC,MAAAA,EAAE,EAAEb,MAHQ;AAIZD,MAAAA,MAAM,EAAEe,QAAQ,CAACf,MAAD;AAJJ,KAAhB;AAMAL,IAAAA,UAAU,CAACgB,OAAD,CAAV;AACAZ,IAAAA,OAAO,CAACiB,IAAR,CAAc,UAAShB,MAAO,EAA9B;AACAiB,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACH,GAVD;;AAYA,MAAIjB,IAAI,KAAK,IAAb,EAAmB;AACf,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBAAO,QAAC,QAAD;AAAU,IAAA,IAAI,EAAEA,IAAhB;AAAsB,IAAA,KAAK,EAAEO;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GAnCQX,Q;UACWL,U,EACWC,S;;;KAFtBI,Q;AAqCT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { updateCard, readCard } from \"../utils/api\";\nimport EditForm from \"./EditForm\";\n\nfunction EditCard() {\n    const history = useHistory();\n    const { deckId, cardId } = useParams();\n\n    const [card, setCard] = useState(null);\n\n    useEffect(() => {\n        async function getCard() {\n            try {\n                const response = await readCard(cardId);\n                setCard(response);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        getCard();\n    }, [cardId]);\n\n    const handleCardUpdate = (formData) => {\n        const updated = {\n            front: formData.front,\n            back: formData.back,\n            id: cardId,\n            deckId: parseInt(deckId)\n        }\n        updateCard(updated);\n        history.push(`/decks/${deckId}`)\n        window.location.reload(true);\n    }\n\n    if (card === null) {\n        return <strong>Loading...</strong>;\n    }\n\n    return <EditForm data={card} event={handleCardUpdate} />;\n}\n\nexport default EditCard;"]},"metadata":{},"sourceType":"module"}